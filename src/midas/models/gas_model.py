import numpy as np
from astropy import constants as const
from astropy import units as u
from astropy import constants as const

from midas.utils import inter_2d, gaussian
from .emission_model import EmissionModel, EmissionGridModel, BidimensionalGridMixin

class Gas_model(BidimensionalGridMixin, EmissionGridModel):
    """This class represents a gas model generated by Cloudy

    Attributes
    ----------
    temperatures: (np.ndarray) Temperature range in the model. Units: K
    densities: (np.ndarray) Density range in the model. Units: cm^-3
    metallicities: (np.ndarray) Metallicity range in the model.

    Methods
    -------
    load_grid:
    get_spectra:    
    """
    h_densities = None
    temperatures = None
    metallicities = None
    sed_grid = None
    wavelength = None

    def __init__(self):
        self.load_grid()

    def load_grid(self):
        """Here you should include the method that is able to read the files."""
        self.h_densities = np.logspace(-3, 3, num=7)
        self.temperatures = np.logspace(3, 7, num=9)
        self.sed_grid = (np.loadtxt('emission_coef.txt', dtype=float).reshape(7, 9, 8228).T
                         / const.L_sun.to('erg/s').value)
        # The wavelength axis is stored in decreasing order...
        self.sed_grid = self.sed_grid[::-1, :, :]
        self.wavelength = np.loadtxt('wavelength.txt')[::-1]
        self.sed_grid /= self.wavelength[:, np.newaxis, np.newaxis]  # to Lsun/AA/Msun

    def get_spectra(self, mass, temperature, h_density):
        """This function should be able to interpolate the grid and return a spectra for
        a given set of parameters"""
        gas_emission = inter_2d(self.sed_grid, self.temperatures, self.h_densities,
                                temperature, h_density)
        return gas_emission * mass


class HI_model(EmissionModel):
    """TODO"""
    def __init__(self, wavelength):
        self.wavelength = wavelength

    def emission_HI(self, m_particles, T):
        """
        This function determines the luminosity in erg/s of an HI cloud.
        
        Arguments:
            
        m_particles:  mass of particles in simulation in solar masses
        
        T:  gas temperature 
        """
        A_TR = 2.8843e-15 * 1/u.s # HI transition rate [s^-1]
        FREQ = 1420.405 * u.MHz # HI transition frequency [Hz]
        
        N_H = m_particles * const.M_sun / const.m_p # number of H atoms
        
        if T > 1e4:
            # ionization 
            return 0.0
        if T < 1e4:
            L = ((3/4) * N_H * A_TR * const.h * FREQ).to(u.erg / u.s) # Luminosity [erg/s]
            return L.value
    
    def get_spectra(self, wavelength, mass, lsf_fwhm, line_pos=21.12e8):
        intensity = self.emission_HI(mass, T=0)
        return gaussian(wavelength, intensity, m=line_pos, s=lsf_fwhm/2)
