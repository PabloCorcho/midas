# -*- coding: utf-8 -*-


import numpy as np
from astropy import constants as const
from tqdm import tqdm

class Gas_model(object):
    """This class represents a gas model generated by Cloudy
    Attributes
    ----------
    temperatures: (np.ndarray) Temperature range in the model. Units: K
    densities: (np.ndarray) Density range in the model. Units: cm^-3
    metallicities: (np.ndarray) Metallicity range in the model.
    Methods
    -------
    inter_2d:
    get_spectra:    
    Example
    -------
    # Predict the spectrum of a particle with 1e5 Msun, T=1e5 K and Z=0.02
    model = Cloudy()
    spectra = model.get_spectra(mass=1e5, temp=1e5, metallicity=0.02)
    """
    temperatures = None
    densities = None
    metallicities = None

    def __init__(self, Galaxy=None):
        if Galaxy is not None:
            self.load_grid()
            self.galaxy = Galaxy
            self.density = 3.105e-22 * self.galaxy.gas['Density'] # g/cm^3
            self.hden = self.galaxy.gas['GFM_Metals'][:, 0] * self.density / (const.m_p.value*1e3)
            self.particle_masses = self.galaxy.gas['Masses']
            self.temperature = self.galaxy.gas['temp']
        
            self.particle_masses[self.hden<=1.0e-3] = 0.0
            self.hden[self.hden<1e-3] = 1e-3
        else:
            raise ValueError("Galaxy object not provided")
            

    def load_grid(self):
        """Here you should include the method that is able to read the files."""
        self.hden_range = np.logspace(-3, 3, num=7)
        self.T_range = np.logspace(3, 7, num=9)
        self.emission_coef = np.loadtxt('emission_coef.txt').reshape(7,9,8228)
        self.wavelength = np.loadtxt('wavelength.txt')
        
        
    def inter_2d(self,array,var1_range,var2_range,var1_inter,var2_inter):
        """"This function performs 2D linear interpolation"""
        if var1_inter > max(var1_range) or var1_inter < min(var1_range) or var2_inter > max(var2_range) or var2_inter < min(var2_range):
            print("Value out of range")
            return 0.0
        else:
            indx1 = np.searchsorted(var1_range,var1_inter)
            indx2 = np.searchsorted(var2_range,var2_inter)
            
            # weights
            w1 = (var1_inter - var1_range[indx1 - 1])/(var1_range[indx1] - var1_range[indx1 - 1])
            w2 = (var2_inter - var2_range[indx2 - 1])/(var2_range[indx2] - var2_range[indx2 - 1])
        
            return w1*w2*array[indx1,indx2,:] + (1-w1)*w2*array[indx1-1,indx2,:] + w1*(1-w2)*array[indx1,indx2-1,:] + (1-w1)*(1-w2)*array[indx1-1,indx2-1,:]    

    def get_spectra(self):
        """This function should be able to interpolate the grid and return a spectra for
        a given set of parameters"""
        n_part = self.particle_masses.size
        gas_emission = np.zeros(8228)
        wavelength = self.wavelength
        
        for part_i in tqdm(range(n_part)):
            particle_mass = (1e10/0.7) * self.particle_masses[part_i]
            temperature = self.temperature[part_i]
            hdensity = self.hden[part_i]
            interpolation = self.inter_2d(self.emission_coef, self.hden_range, self.T_range, hdensity, temperature)
            gas_emission += particle_mass * interpolation
        
        return wavelength,gas_emission
        
        
        